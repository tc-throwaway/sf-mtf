export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "LoanChargeService",
        "fileName": "LoanChargeService.html",
        "text": "LoanChargeService Business logic to support Loan Charge automations Signature public with sharing class LoanChargeService Author @tomcarman Since Q3 2025 LoanChargeService Properties Name Signature LOAN_CHARGE_AMOUNT_ADMIN public static final Integer LOAN_CHARGE_AMOUNT_ADMIN LOAN_CHARGE_AMOUNT_RELEASE public static final Integer LOAN_CHARGE_AMOUNT_RELEASE LOAN_CHARGE_TYPE_ADMIN public static final String LOAN_CHARGE_TYPE_ADMIN LOAN_CHARGE_TYPE_INTEREST public static final String LOAN_CHARGE_TYPE_INTEREST LOAN_CHARGE_TYPE_LEGAL public static final String LOAN_CHARGE_TYPE_LEGAL LOAN_CHARGE_TYPE_RELEASE public static final String LOAN_CHARGE_TYPE_RELEASE LoanChargeService Methods adjustReleaseChargeDates(loanCharges) Logic to extend the date of a Release Charge when an new Loan Charge with a later date is added. getRelatedLoanIds(loanCharges) Given a set of Loan Charges, return a set of related Loan Ids getReleaseCharges(loanIds) Given a set of Loan Ids, return the associated Release Charge adjustReleaseChargeDates(loanCharges) Logic to extend the date of a Release Charge when an new Loan Charge with a later date is added. Signature public static void adjustReleaseChargeDates(List<Loan_Charge__c> loanCharges) Parameters loanCharges Type: List<Loan_Charge__c> List of Loan Charges, typically from Trigger.new() getRelatedLoanIds(loanCharges) Given a set of Loan Charges, return a set of related Loan Ids Signature private static Set<Id> getRelatedLoanIds(List<Loan_Charge__c> loanCharges) Parameters loanCharges Type: List<Loan_Charge__c> List of Loan Charges to retrieve the Loan Ids from Returns Set<Id>  Set of Loan__c Ids getReleaseCharges(loanIds) Given a set of Loan Ids, return the associated Release Charge Signature public static Map<Id, Loan_Charge__c> getReleaseCharges(Set<Id> loanIds) Parameters loanIds Type: Set<Id> Set of Loan Ids to get the Release Charges for Returns Map<Id, Loan_Charge__c>  Map of Loan Id | Loan Charge record(of type Release Charge)"
    },
    {
        "title": "LoanChargeServiceTest",
        "fileName": "LoanChargeServiceTest.html",
        "text": "LoanChargeServiceTest Unit tests for LoanChargeService.cls Signature @isTest private class LoanChargeServiceTest Author @tomcarman Since Q3 2025 LoanChargeServiceTest Methods setup() testPreventDuplicateReleaseCharges() testReleaseChargeDateAdjustmentForNewCharge() testReleaseChargeDateNotAdjustedForEarlierCharge() setup() Signature @testSetup static void setup() testPreventDuplicateReleaseCharges() Signature @isTest static void testPreventDuplicateReleaseCharges() testReleaseChargeDateAdjustmentForNewCharge() Signature @isTest static void testReleaseChargeDateAdjustmentForNewCharge() testReleaseChargeDateNotAdjustedForEarlierCharge() Signature @isTest static void testReleaseChargeDateNotAdjustedForEarlierCharge()"
    },
    {
        "title": "LoanChargeTriggerHandler",
        "fileName": "LoanChargeTriggerHandler.html",
        "text": "LoanChargeTriggerHandler Trigger Handler for LoanChargeTrigger Signature public with sharing class LoanChargeTriggerHandler Author @tomcarman Since Q3 2025 LoanChargeTriggerHandler Methods handle() Entrypoint for trigger handler, dispatches based on trigger context handleAfterInsert(newLoanCharges, newLoanChargeMap) All Loan Charge after insert operations handle() Entrypoint for trigger handler, dispatches based on trigger context Signature public static void handle() handleAfterInsert(newLoanCharges, newLoanChargeMap) All Loan Charge after insert operations Signature private static void handleAfterInsert(List<Loan_Charge__c> newLoanCharges, Map<Id, Loan_Charge__c> newLoanChargeMap) Parameters newLoans Loan Charges from Trigger.new() newLoanMap Loan Charges from Trigger.newMap()"
    },
    {
        "title": "LoanService",
        "fileName": "LoanService.html",
        "text": "LoanService Business logic to support Loan automations Signature public class LoanService Author @tomcarman Since Q3 2025 LoanService Methods createReleaseCharges(loans) Automation to create a Loan Charge of type Release Charge when a new Loan is created processLoanTermChanges(oldLoanMap, newLoanMap) Given some updated Loans, identify Laons which have had their Term changed and generate a LoanService.TermChange updateLoanTerms(termChanges) description Update loan terms based on a list of TermChanges. Update the related Release Charge with a new date, and insert a new Admin Charge. IMPORTANT: Disables Loan Charge trigger whilst processing to prevent recursion. createReleaseCharges(loans) Automation to create a Loan Charge of type Release Charge when a new Loan is created Signature public static void createReleaseCharges(List<Loan__c> loans) Parameters loans Type: List<Loan__c> List of Loans, typically Trigger.new() fron LoanTriggerHandler processLoanTermChanges(oldLoanMap, newLoanMap) Given some updated Loans, identify Laons which have had their Term changed and generate a LoanService.TermChange Signature public static void processLoanTermChanges(Map<Id, Loan__c> oldLoanMap, Map<Id, Loan__c> newLoanMap) Parameters oldLoanMap Type: Map<Id, Loan__c> Map of Loans from Trigger.oldMap() newLoanMap Type: Map<Id, Loan__c> Map of Loans from Trigger.newMap() updateLoanTerms(termChanges) description Update loan terms based on a list of TermChanges. Update the related Release Charge with a new date, and insert a new Admin Charge. IMPORTANT: Disables Loan Charge trigger whilst processing to prevent recursion. Signature private static void updateLoanTerms(List<TermChange> termChanges) Parameters termChanges Type: List<TermChange> List of LoanService.TermChange LoanService.TermChange Represents an \"item of work\" for when a loan has a change in term length Signature private class TermChange LoanService.TermChange Constructors TermChange(loanId, dateLoanIssued, newTerm) TermChange(loanId, dateLoanIssued, newTerm) Signature TermChange(Id loanId, Date dateLoanIssued, Integer newTerm)"
    },
    {
        "title": "LoanServiceTest",
        "fileName": "LoanServiceTest.html",
        "text": "LoanServiceTest Unit tests for LoanService.cls Signature @isTest private class LoanServiceTest Author @tomcarman Since Q3 2025 LoanServiceTest Methods setup() testAdminFeeCreatedWhenTermChanged() testLoanChargeAndBalancesAreUpdated() testMultipleTermChanges() testNoChangesWhenTermRemainsTheSame() testReleaseChargeCreatedOnLoanInsert() testReleaseChargeCreatedOnLoanInsertBulk() testTermModificationUpdatesReleaseChargeDate() setup() Signature @testSetup static void setup() testAdminFeeCreatedWhenTermChanged() Signature @isTest static void testAdminFeeCreatedWhenTermChanged() testLoanChargeAndBalancesAreUpdated() Signature @isTest static void testLoanChargeAndBalancesAreUpdated() testMultipleTermChanges() Signature @isTest static void testMultipleTermChanges() testNoChangesWhenTermRemainsTheSame() Signature @isTest static void testNoChangesWhenTermRemainsTheSame() testReleaseChargeCreatedOnLoanInsert() Signature @isTest static void testReleaseChargeCreatedOnLoanInsert() testReleaseChargeCreatedOnLoanInsertBulk() Signature @isTest static void testReleaseChargeCreatedOnLoanInsertBulk() testTermModificationUpdatesReleaseChargeDate() Signature @isTest static void testTermModificationUpdatesReleaseChargeDate()"
    },
    {
        "title": "LoanTriggerHandler",
        "fileName": "LoanTriggerHandler.html",
        "text": "LoanTriggerHandler Trigger Handler for LoanTrigger Signature public class LoanTriggerHandler Author @tomcarman Since Q3 2025 LoanTriggerHandler Methods handle() Entrypoint for trigger handler, dispatches based on trigger context handleAfterInsert(newLoans, newLoanMap) All Loan after insert operations handleAfterUpdate(oldLoanMap, newLoanMap) All Loan after update operations handle() Entrypoint for trigger handler, dispatches based on trigger context Signature public static void handle() handleAfterInsert(newLoans, newLoanMap) All Loan after insert operations Signature private static void handleAfterInsert(List<Loan__c> newLoans, Map<Id, Loan__c> newLoanMap) Parameters newLoans Type: List<Loan__c> Loans from Trigger.new() newLoanMap Type: Map<Id, Loan__c> Loans from Trigger.newMap() handleAfterUpdate(oldLoanMap, newLoanMap) All Loan after update operations Signature private static void handleAfterUpdate(Map<Id, Loan__c> oldLoanMap, Map<Id, Loan__c> newLoanMap) Parameters oldLoanMap Type: Map<Id, Loan__c> Loans from Trigger.oldMap() newLoanMap Type: Map<Id, Loan__c> Loans from Trigger.newMap()"
    },
    {
        "title": "TriggerControl",
        "fileName": "TriggerControl.html",
        "text": "TriggerControl Very basic trigger framework to control recursion. In reality you would implement a broader trigger framework to handle recursion / more granula flow control based on trigger context / logging etc Signature public class TriggerControl Author @tomcarman Since Q3 2025 TriggerControl Properties Name Signature Annotations Description bypassedTriggers private static Set<String> bypassedTriggers Set of trigger names that are currently being bypassed for this transaction processedTermChanges private static Set<Id> processedTermChanges @TestVisible Set of Term Changes that have already been processed, used by LoanService.cls TriggerControl Methods bypass(triggerName) Add a trigger to be bypassed in the current transaction clearBypass(triggerName) Remove a previously added trigger from being bypassed in the current transaction hasProcessedTermChange(loanId) Given a Loan Id, check if it has processed Term Changes in the current transaction isBypassed(triggerName) Check if a trigger is currently being bypassed given its name markTermChangeProcessed(loanId) Given a Loan Id, add it to a set that tracks Loans that have had Term Changes processed in the current transaction bypass(triggerName) Add a trigger to be bypassed in the current transaction Signature public static void bypass(String triggerName) Parameters triggerName Type: String The name of the trigger e.g. 'LoanChargeTrigger' clearBypass(triggerName) Remove a previously added trigger from being bypassed in the current transaction Signature public static void clearBypass(String triggerName) Parameters triggerName Type: String The name of the trigger e.g. 'LoanChargeTrigger' hasProcessedTermChange(loanId) Given a Loan Id, check if it has processed Term Changes in the current transaction Signature public static boolean hasProcessedTermChange(Id loanId) Parameters loanId Type: Id Id of the Loan to check Returns boolean  Whether the Loan has had Term Changes processed during this transaction isBypassed(triggerName) Check if a trigger is currently being bypassed given its name Signature public static boolean isBypassed(String triggerName) Parameters triggerName Type: String The name of the trigger e.g. 'LoanChargeTrigger' Returns boolean  Whether the trigger is being bypassed in the current transaction markTermChangeProcessed(loanId) Given a Loan Id, add it to a set that tracks Loans that have had Term Changes processed in the current transaction Signature public static void markTermChangeProcessed(Id loanId) Parameters loanId Type: Id Id of the Loan to add"
    }
];
